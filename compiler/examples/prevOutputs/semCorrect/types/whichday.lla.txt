

 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: duration

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: duration

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: day1, Type: Unknown
		Name: day2, Type: Unknown


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: day1

    TYPE: Unknown

Symbol Entry: 
    ID: day2

    TYPE: Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: int_of_day

    TYPE: fn: CustomType(day) -> Integer

    PARAMS:
		Name: d, Type: CustomType(day)





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: h1, Type: Unknown
		Name: h2, Type: Unknown


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: h1

    TYPE: Unknown

Symbol Entry: 
    ID: h2

    TYPE: Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: int_of_hour

    TYPE: fn: CustomType(hour) -> Integer

    PARAMS:
		Name: h, Type: CustomType(hour)





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: intv1, Type: Unknown
		Name: intv2, Type: Unknown


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: intv1

    TYPE: Unknown

Symbol Entry: 
    ID: intv2

    TYPE: Unknown
 ====================================================== 
SCOPE: 3
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: day1

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf1

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht1

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 5
 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: day2

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf2

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht2

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: cmp

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: intv1, Type: Unknown
		Name: intv2, Type: Unknown


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: intv1

    TYPE: Unknown

Symbol Entry: 
    ID: intv2

    TYPE: Unknown
 ====================================================== 
SCOPE: 3
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: day1

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf1

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht1

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 5
 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: day2

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf2

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht2

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: cmp

    TYPE: Integer
 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: cf

    TYPE: Integer

Symbol Entry: 
    ID: ct

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: t

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unknown

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: t

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: all

    TYPE: fn: CustomType(day) -> Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: d, Type: CustomType(day)





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: d, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: d

    TYPE: Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: str

    TYPE: Array [*] of type Unknown




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: u

    TYPE: Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: walk

    TYPE: fn: CustomType(tree) -> Unit

    PARAMS:
		Name: t, Type: CustomType(tree)





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: intv

    TYPE: CustomType(interval)
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: walk

    TYPE: fn: Unknown -> CustomType(tree)

    PARAMS:
		Name: t, Type: CustomType(tree)

 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: t

    TYPE: CustomType(tree)
 ====================================================== 
SCOPE: 5
 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: count

    TYPE: Integer

Symbol Entry: 
    ID: intv_t

    TYPE: CustomType(interval)

Symbol Entry: 
    ID: left

    TYPE: CustomType(tree)

Symbol Entry: 
    ID: right

    TYPE: CustomType(tree)
 ====================================================== 
SCOPE: 7
 ====================================================== 
SCOPE: 8
 ====================================================== 
SCOPE: 9
 ====================================================== 
SCOPE: 10

Symbol Entry: 
    ID: day1

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf1

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht1

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 11
 ====================================================== 
SCOPE: 12

Symbol Entry: 
    ID: day2

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf2

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht2

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 13

Symbol Entry: 
    ID: intv_left

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

Symbol Entry: 
    ID: intv_right

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: intv

    TYPE: CustomType(interval)
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: walk

    TYPE: fn: Unknown -> CustomType(tree)

    PARAMS:
		Name: t, Type: CustomType(tree)

 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: t

    TYPE: CustomType(tree)
 ====================================================== 
SCOPE: 5
 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: count

    TYPE: Integer

Symbol Entry: 
    ID: intv_t

    TYPE: CustomType(interval)

Symbol Entry: 
    ID: left

    TYPE: CustomType(tree)

Symbol Entry: 
    ID: right

    TYPE: CustomType(tree)
 ====================================================== 
SCOPE: 7
 ====================================================== 
SCOPE: 8
 ====================================================== 
SCOPE: 9
 ====================================================== 
SCOPE: 10

Symbol Entry: 
    ID: day1

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf1

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht1

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 11
 ====================================================== 
SCOPE: 12

Symbol Entry: 
    ID: day2

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf2

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht2

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 13

Symbol Entry: 
    ID: intv_left

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

Symbol Entry: 
    ID: intv_right

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: intv

    TYPE: CustomType(interval)
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: walk

    TYPE: fn: Unknown -> CustomType(tree)

    PARAMS:
		Name: t, Type: CustomType(tree)

 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: t

    TYPE: CustomType(tree)
 ====================================================== 
SCOPE: 5
 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: count

    TYPE: Integer

Symbol Entry: 
    ID: intv_t

    TYPE: CustomType(interval)

Symbol Entry: 
    ID: left

    TYPE: CustomType(tree)

Symbol Entry: 
    ID: right

    TYPE: CustomType(tree)
 ====================================================== 
SCOPE: 7
 ====================================================== 
SCOPE: 8
 ====================================================== 
SCOPE: 9
 ====================================================== 
SCOPE: 10

Symbol Entry: 
    ID: day1

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf1

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht1

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 11
 ====================================================== 
SCOPE: 12

Symbol Entry: 
    ID: day2

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf2

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht2

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 13

Symbol Entry: 
    ID: intv_left

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

Symbol Entry: 
    ID: intv_middle

    TYPE: CustomType(interval)

Symbol Entry: 
    ID: intv_right

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: intv

    TYPE: CustomType(interval)
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: walk

    TYPE: fn: CustomType(tree) -> CustomType(tree)

    PARAMS:
		Name: t, Type: CustomType(tree)





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Unknown -> Unknown -> Unknown -> Unknown

    PARAMS:
		Name: mn, Type: Unknown
		Name: tot, Type: Unknown
		Name: lim, Type: Unknown


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Unknown

Symbol Entry: 
    ID: mn

    TYPE: Unknown

Symbol Entry: 
    ID: tot

    TYPE: Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Unknown




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Unknown -> Unknown

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Unknown


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Unknown

Symbol Entry: 
    ID: mn

    TYPE: Integer

Symbol Entry: 
    ID: tot

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Unknown
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: check_joined

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: u, Type: Unknown

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: u

    TYPE: Unknown
 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: result

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Unknown -> Unknown

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Unknown


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Unknown

Symbol Entry: 
    ID: mn

    TYPE: Integer

Symbol Entry: 
    ID: tot

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: check_joined

    TYPE: fn: Unknown -> Integer

    PARAMS:
		Name: u, Type: Unknown





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Unknown -> Unknown

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Unknown


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Unknown

Symbol Entry: 
    ID: mn

    TYPE: Integer

Symbol Entry: 
    ID: tot

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: check_joined

    TYPE: fn: Unit -> Integer

    PARAMS:
		Name: u, Type: Unit

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: new_joining

    TYPE: fn: Unknown -> Unknown -> Unknown -> Unknown -> Unknown

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: hf, Type: CustomType(hour)
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: count

    TYPE: Integer

Symbol Entry: 
    ID: d

    TYPE: CustomType(day)

Symbol Entry: 
    ID: hf

    TYPE: CustomType(hour)

Symbol Entry: 
    ID: ht

    TYPE: CustomType(hour)
 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: result

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Unknown -> Unknown

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Unknown


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Unknown

Symbol Entry: 
    ID: mn

    TYPE: Integer

Symbol Entry: 
    ID: tot

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: check_joined

    TYPE: fn: Unit -> Integer

    PARAMS:
		Name: u, Type: Unit

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: new_joining

    TYPE: fn: CustomType(day) -> CustomType(hour) -> CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: hf, Type: CustomType(hour)
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Unknown -> Unknown

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Unknown


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Unknown

Symbol Entry: 
    ID: mn

    TYPE: Integer

Symbol Entry: 
    ID: tot

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: check_joined

    TYPE: fn: Unit -> Integer

    PARAMS:
		Name: u, Type: Unit

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: new_joining

    TYPE: fn: CustomType(day) -> CustomType(hour) -> CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: hf, Type: CustomType(hour)
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: extend_joining

    TYPE: fn: CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Unknown

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Integer

Symbol Entry: 
    ID: mn

    TYPE: Integer

Symbol Entry: 
    ID: tot

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: check_joined

    TYPE: fn: Unit -> Integer

    PARAMS:
		Name: u, Type: Unit

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: new_joining

    TYPE: fn: CustomType(day) -> CustomType(hour) -> CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: hf, Type: CustomType(hour)
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: extend_joining

    TYPE: fn: CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: walk

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: t, Type: CustomType(tree)

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: t

    TYPE: CustomType(tree)
 ====================================================== 
SCOPE: 9
 ====================================================== 
SCOPE: 10

Symbol Entry: 
    ID: count

    TYPE: Integer

Symbol Entry: 
    ID: intv

    TYPE: CustomType(interval)

Symbol Entry: 
    ID: left

    TYPE: CustomType(tree)

Symbol Entry: 
    ID: right

    TYPE: CustomType(tree)
 ====================================================== 
SCOPE: 11

Symbol Entry: 
    ID: nl

    TYPE: Unknown

Symbol Entry: 
    ID: nr

    TYPE: Unknown

Symbol Entry: 
    ID: nt

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Unknown

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Integer

Symbol Entry: 
    ID: mn

    TYPE: Integer

Symbol Entry: 
    ID: tot

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: check_joined

    TYPE: fn: Unit -> Integer

    PARAMS:
		Name: u, Type: Unit

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: new_joining

    TYPE: fn: CustomType(day) -> CustomType(hour) -> CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: hf, Type: CustomType(hour)
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: extend_joining

    TYPE: fn: CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: walk

    TYPE: fn: CustomType(tree) -> Integer

    PARAMS:
		Name: t, Type: CustomType(tree)





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Unknown

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: lim

    TYPE: Integer

Symbol Entry: 
    ID: mn

    TYPE: Integer

Symbol Entry: 
    ID: tot

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count_max_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: count_min_join

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: d_join

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: ht_join

    TYPE: Reference of type CustomType(hour)

Symbol Entry: 
    ID: joining

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: check_joined

    TYPE: fn: Unit -> Integer

    PARAMS:
		Name: u, Type: Unit

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: new_joining

    TYPE: fn: CustomType(day) -> CustomType(hour) -> CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: hf, Type: CustomType(hour)
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: extend_joining

    TYPE: fn: CustomType(hour) -> Integer -> Integer

    PARAMS:
		Name: ht, Type: CustomType(hour)
		Name: count, Type: Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: walk

    TYPE: fn: CustomType(tree) -> Integer

    PARAMS:
		Name: t, Type: CustomType(tree)

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: count

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: prf

    TYPE: Array [*] of type Unknown

Symbol Entry: 
    ID: str

    TYPE: Array [*] of type Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: walk

    TYPE: fn: Integer -> Integer -> Boolean

    PARAMS:
		Name: i, Type: Integer
		Name: n, Type: Integer





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: prf

    TYPE: Array [*] of type Unknown

Symbol Entry: 
    ID: str

    TYPE: Array [*] of type Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: walk

    TYPE: fn: Integer -> Integer -> Boolean

    PARAMS:
		Name: i, Type: Integer
		Name: n, Type: Integer

 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: lprf

    TYPE: Integer

Symbol Entry: 
    ID: lstr

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Unknown


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Unknown




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: d, Type: Unknown
		Name: i, Type: Unknown

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: d

    TYPE: Unknown

Symbol Entry: 
    ID: i

    TYPE: Unknown
 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: check

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: d, Type: Unknown

 ====================================================== 
SCOPE: 9

Symbol Entry: 
    ID: d

    TYPE: Unknown
 ====================================================== 
SCOPE: 10

Symbol Entry: 
    ID: str

    TYPE: Array [*] of type Unknown




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Unknown -> Reference of type Integer -> Unknown

    PARAMS:
		Name: d, Type: Unknown
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: d

    TYPE: Unknown

Symbol Entry: 
    ID: i

    TYPE: Reference of type Integer
 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: check

    TYPE: fn: CustomType(day) -> Boolean

    PARAMS:
		Name: d, Type: CustomType(day)





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: parseTwoDigits

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: i, Type: Unknown
		Name: n, Type: Unknown

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: i

    TYPE: Unknown

Symbol Entry: 
    ID: n

    TYPE: Unknown
 ====================================================== 
SCOPE: 9

Symbol Entry: 
    ID: isdigit

    TYPE: fn: Character -> Boolean

    PARAMS:
		Name: c, Type: Character





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: parseTwoDigits

    TYPE: fn: Unknown -> Unknown -> Unknown

    PARAMS:
		Name: i, Type: Unknown
		Name: n, Type: Unknown

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: i

    TYPE: Unknown

Symbol Entry: 
    ID: n

    TYPE: Unknown
 ====================================================== 
SCOPE: 9

Symbol Entry: 
    ID: isdigit

    TYPE: fn: Character -> Boolean

    PARAMS:
		Name: c, Type: Character

 ====================================================== 
SCOPE: 10

Symbol Entry: 
    ID: digit

    TYPE: fn: Character -> Integer

    PARAMS:
		Name: c, Type: Character





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: parseTwoDigits

    TYPE: fn: Reference of type Integer -> Unknown -> Unknown

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: n, Type: Unknown

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: i

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: n

    TYPE: Unknown
 ====================================================== 
SCOPE: 9

Symbol Entry: 
    ID: isdigit

    TYPE: fn: Character -> Boolean

    PARAMS:
		Name: c, Type: Character

 ====================================================== 
SCOPE: 10

Symbol Entry: 
    ID: digit

    TYPE: fn: Character -> Integer

    PARAMS:
		Name: c, Type: Character

 ====================================================== 
SCOPE: 11

Symbol Entry: 
    ID: d1

    TYPE: Character

Symbol Entry: 
    ID: d2

    TYPE: Character




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: parseTwoDigits

    TYPE: fn: Reference of type Integer -> Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: n, Type: Reference of type Integer





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: parseTwoDigits

    TYPE: fn: Reference of type Integer -> Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: n, Type: Reference of type Integer

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: parseHour

    TYPE: fn: Reference of type Integer -> Unknown -> Unknown -> Unknown

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: l, Type: Integer
		Name: h, Type: Unknown

 ====================================================== 
SCOPE: 9

Symbol Entry: 
    ID: h

    TYPE: Unknown

Symbol Entry: 
    ID: i

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: l

    TYPE: Integer
 ====================================================== 
SCOPE: 10
 ====================================================== 
SCOPE: 11

Symbol Entry: 
    ID: hr

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: mn

    TYPE: Reference of type Unknown




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: parseTwoDigits

    TYPE: fn: Reference of type Integer -> Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: n, Type: Reference of type Integer

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: parseHour

    TYPE: fn: Reference of type Integer -> Integer -> Reference of type CustomType(hour) -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: l, Type: Integer
		Name: h, Type: Reference of type CustomType(hour)





 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: parseTwoDigits

    TYPE: fn: Reference of type Integer -> Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: n, Type: Reference of type Integer

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: parseHour

    TYPE: fn: Reference of type Integer -> Integer -> Reference of type CustomType(hour) -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: l, Type: Integer
		Name: h, Type: Reference of type CustomType(hour)

 ====================================================== 
SCOPE: 9

Symbol Entry: 
    ID: d

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: hf

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: ht

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: i

    TYPE: Reference of type Unknown




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Character
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: errflag

    TYPE: Reference of type Boolean
 ====================================================== 
SCOPE: 4

Symbol Entry: 
    ID: error

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: msg, Type: Array [*] of type Character

 ====================================================== 
SCOPE: 5

Symbol Entry: 
    ID: skipSpaces

    TYPE: fn: Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 6

Symbol Entry: 
    ID: parseDay

    TYPE: fn: Reference of type CustomType(day) -> Reference of type Integer -> Unit

    PARAMS:
		Name: d, Type: Reference of type CustomType(day)
		Name: i, Type: Reference of type Integer

 ====================================================== 
SCOPE: 7

Symbol Entry: 
    ID: parseTwoDigits

    TYPE: fn: Reference of type Integer -> Reference of type Integer -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: n, Type: Reference of type Integer

 ====================================================== 
SCOPE: 8

Symbol Entry: 
    ID: parseHour

    TYPE: fn: Reference of type Integer -> Integer -> Reference of type CustomType(hour) -> Unit

    PARAMS:
		Name: i, Type: Reference of type Integer
		Name: l, Type: Integer
		Name: h, Type: Reference of type CustomType(hour)

 ====================================================== 
SCOPE: 9

Symbol Entry: 
    ID: d

    TYPE: Reference of type CustomType(day)

Symbol Entry: 
    ID: hf

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: ht

    TYPE: Reference of type Unknown

Symbol Entry: 
    ID: i

    TYPE: Reference of type Integer
 ====================================================== 
SCOPE: 10
 ====================================================== 
SCOPE: 11

Symbol Entry: 
    ID: l

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Unknown -> Array [*] of type Unknown -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Unknown
		Name: str, Type: Array [*] of type Unknown


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parse

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: u

    TYPE: Unknown
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: line

    TYPE: Array [*] of type Unknown




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Character -> Array [*] of type Character -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Character
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: parse

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Character -> Array [*] of type Character -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Character
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: output

    TYPE: fn: Unknown -> Unknown

    PARAMS:
		Name: av, Type: Integer


Symbol Entry: 
    ID: parse

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer
 ====================================================== 
SCOPE: 2

Symbol Entry: 
    ID: av

    TYPE: Integer
 ====================================================== 
SCOPE: 3

Symbol Entry: 
    ID: count

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Character -> Array [*] of type Character -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Character
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: output

    TYPE: fn: Integer -> Unit

    PARAMS:
		Name: av, Type: Integer


Symbol Entry: 
    ID: parse

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unknown -> Unit

    PARAMS:
		Name: u, Type: Unknown


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer




 $$$ PRINTING SYMBOL TABLE $$$ 
 ====================================================== 
SCOPE: 1

Symbol Entry: 
    ID: After

    TYPE: After()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Before

    TYPE: Before()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Empty

    TYPE: Empty()

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: Friday

    TYPE: Friday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Hour

    TYPE: Hour(Integer, Integer)

    PARAMS:
		Name: hour, Type: CustomType(hour)


Symbol Entry: 
    ID: Inside

    TYPE: Inside()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Interval

    TYPE: Interval(CustomType(day), CustomType(hour), CustomType(hour))

    PARAMS:
		Name: interval, Type: CustomType(interval)


Symbol Entry: 
    ID: LeftSegment

    TYPE: LeftSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Monday

    TYPE: Monday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Node

    TYPE: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))

    PARAMS:
		Name: tree, Type: CustomType(tree)


Symbol Entry: 
    ID: RightSegment

    TYPE: RightSegment()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Super

    TYPE: Super()

    PARAMS:
		Name: comparison, Type: CustomType(comparison)


Symbol Entry: 
    ID: Thursday

    TYPE: Thursday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Tuesday

    TYPE: Tuesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: Wednesday

    TYPE: Wednesday()

    PARAMS:
		Name: day, Type: CustomType(day)


Symbol Entry: 
    ID: add

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: answers

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: availability

    TYPE: Integer

Symbol Entry: 
    ID: compare_day

    TYPE: fn: CustomType(day) -> CustomType(day) -> Integer

    PARAMS:
		Name: day1, Type: CustomType(day)
		Name: day2, Type: CustomType(day)


Symbol Entry: 
    ID: compare_hour

    TYPE: fn: CustomType(hour) -> CustomType(hour) -> Integer

    PARAMS:
		Name: h1, Type: CustomType(hour)
		Name: h2, Type: CustomType(hour)


Symbol Entry: 
    ID: compare_interval

    TYPE: fn: CustomType(interval) -> CustomType(interval) -> CustomType(comparison)

    PARAMS:
		Name: intv1, Type: CustomType(interval)
		Name: intv2, Type: CustomType(interval)


Symbol Entry: 
    ID: comparison

    TYPE: CustomType(comparison)

    PARAMS:
		Name: Before, Type: Before()
		Name: After, Type: After()
		Name: Inside, Type: Inside()
		Name: Super, Type: Super()
		Name: LeftSegment, Type: LeftSegment()
		Name: RightSegment, Type: RightSegment()


Symbol Entry: 
    ID: day

    TYPE: CustomType(day)

    PARAMS:
		Name: Monday, Type: Monday()
		Name: Tuesday, Type: Tuesday()
		Name: Wednesday, Type: Wednesday()
		Name: Thursday, Type: Thursday()
		Name: Friday, Type: Friday()


Symbol Entry: 
    ID: debug

    TYPE: Boolean

Symbol Entry: 
    ID: duration

    TYPE: Integer

Symbol Entry: 
    ID: errors

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: find_interval

    TYPE: fn: Integer -> Integer -> Integer -> Integer

    PARAMS:
		Name: mn, Type: Integer
		Name: tot, Type: Integer
		Name: lim, Type: Integer


Symbol Entry: 
    ID: hour

    TYPE: CustomType(hour)

    PARAMS:
		Name: Hour, Type: Hour(Integer, Integer)


Symbol Entry: 
    ID: init_parsing

    TYPE: Unit

Symbol Entry: 
    ID: init_tree

    TYPE: Unit

Symbol Entry: 
    ID: interval

    TYPE: CustomType(interval)

    PARAMS:
		Name: Interval, Type: Interval(CustomType(day), CustomType(hour), CustomType(hour))


Symbol Entry: 
    ID: isPrefix

    TYPE: fn: Array [*] of type Character -> Array [*] of type Character -> Boolean

    PARAMS:
		Name: prf, Type: Array [*] of type Character
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: linenum

    TYPE: Reference of type Integer

Symbol Entry: 
    ID: main

    TYPE: Unit

Symbol Entry: 
    ID: output

    TYPE: fn: Integer -> Unit

    PARAMS:
		Name: av, Type: Integer


Symbol Entry: 
    ID: parse

    TYPE: fn: Unit -> Unit

    PARAMS:
		Name: u, Type: Unit


Symbol Entry: 
    ID: parseInterval

    TYPE: fn: Array [*] of type Character -> Unit

    PARAMS:
		Name: line, Type: Array [*] of type Character


Symbol Entry: 
    ID: print_day

    TYPE: fn: CustomType(day) -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)


Symbol Entry: 
    ID: print_hour

    TYPE: fn: CustomType(hour) -> Unit

    PARAMS:
		Name: h, Type: CustomType(hour)


Symbol Entry: 
    ID: print_interval

    TYPE: fn: CustomType(interval) -> Unit

    PARAMS:
		Name: intv, Type: CustomType(interval)


Symbol Entry: 
    ID: print_tree

    TYPE: fn: Unit -> Unit

    PARAMS:
		Name: u, Type: Unit


Symbol Entry: 
    ID: string_of_day

    TYPE: fn: CustomType(day) -> Array [*] of type Character -> Unit

    PARAMS:
		Name: d, Type: CustomType(day)
		Name: str, Type: Array [*] of type Character


Symbol Entry: 
    ID: t

    TYPE: Reference of type CustomType(tree)

Symbol Entry: 
    ID: tree

    TYPE: CustomType(tree)

    PARAMS:
		Name: Empty, Type: Empty()
		Name: Node, Type: Node(CustomType(interval), Integer, CustomType(tree), CustomType(tree))


Symbol Entry: 
    ID: worst

    TYPE: Integer


Success.
